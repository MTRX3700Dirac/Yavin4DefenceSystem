.TH "C:/Users/Grant/Documents/GitHub/Yavin4DefenceSystem/Code/Range.c" 3 "Wed Oct 22 2014" "Version V1.1" "Yavin IV Death Star Tracker" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/Grant/Documents/GitHub/Yavin4DefenceSystem/Code/Range.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'Common\&.h'\fP
.br
\fC#include 'Temp\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSPD_SND\fP(T)   (\fBDIV_1024\fP(T * (unsigned int)614) + 331)"
.br
.ti -1c
.RI "#define \fBIR_CONV\fP(ad)   ((unsigned long)135174 / (ad) - 28)"
.br
.ti -1c
.RI "#define \fBULTRA_CONV\fP(tme, T)   \fBDIV_65536\fP(tme * (unsigned long)(\fBDIV_65536\fP((unsigned long)519078 * T) + (unsigned long)4362)) - 18"
.br
.ti -1c
.RI "#define \fBNUM_IR_READS\fP   10"
.br
.ti -1c
.RI "#define \fBINIT_PIN\fP   \fBPORTCbits\&.RC3\fP"
.br
.ti -1c
.RI "#define \fBINIT_TRIS\fP   \fBTRISCbits\&.RC3\fP"
.br
.ti -1c
.RI "#define \fBCCP1_INPT\fP   \fBTRISCbits\&.RC2\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fBbeginUS\fP (void)"
.br
.ti -1c
.RI "static unsigned int \fBrangeIR\fP (void)"
.br
.ti -1c
.RI "static unsigned int \fBrangeUS\fP (unsigned char temp)"
.br
.ti -1c
.RI "void \fBconfigureRange\fP (void)"
.br
.ti -1c
.RI "static unsigned int \fBsampleIR\fP (char numSamples)"
.br
.ti -1c
.RI "void \fBconfigureAD\fP (void)"
.br
.ti -1c
.RI "void \fBrangeISR\fP (void)"
.br
.ti -1c
.RI "void \fBcalibrateRange\fP (unsigned int reference)"
.br
.ti -1c
.RI "unsigned int \fBrawRange\fP (void)"
.br
.ti -1c
.RI "unsigned int \fBrange\fP (void)"
.br
.ti -1c
.RI "unsigned int \fBrangeUltrasonic\fP (void)"
.br
.ti -1c
.RI "\fBTargetState\fP \fBgetTargetState\fP (void)"
.br
.ti -1c
.RI "\fBTargetState\fP \fBreadTargetState\fP (void)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static signed int \fBcalibration_offset\fP = 0"
.br
.ti -1c
.RI "static volatile char \fBmeasuringUS\fP = 0"
.br
.ti -1c
.RI "static unsigned int \fBlastRange\fP = 0"
.br
.ti -1c
.RI "static signed int \fBcalibration_offset_IR\fP = 0"
.br
.ti -1c
.RI "static signed int \fBcalibration_offset_US\fP = 0"
.br
.ti -1c
.RI "static \fBTargetState\fP \fBcurrent_target_state\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define CCP1_INPT   \fBTRISCbits\&.RC2\fP"

.SS "#define INIT_PIN   \fBPORTCbits\&.RC3\fP"

.SS "#define INIT_TRIS   \fBTRISCbits\&.RC3\fP"

.SS "#define IR_CONV(ad)   ((unsigned long)135174 / (ad) - 28)"

.SS "#define NUM_IR_READS   10"

.SS "#define SPD_SND(T)   (\fBDIV_1024\fP(T * (unsigned int)614) + 331)"

.PP
 File: \fBRange\&.c\fP Author: Grant
.PP
Description: Contains all the functionality for the range module\&. All variables and settings concerning the range module including the the max distance, timeouts etc are private to this module\&. The interface functions allow all valid access to the module\&.
.PP
Duties: -Interface to the IR and Ultrasonic sensors -Read the range from the IR and ultrasonic sensors -Fuse distances from the IR and ultrasonic sensors -Calibrate the IR and ultrasonic sensors
.PP
Functions:
.PP
Created on 15 September 2014, 11:27 AM 
.SS "#define ULTRA_CONV(tme, T)   \fBDIV_65536\fP(tme * (unsigned long)(\fBDIV_65536\fP((unsigned long)519078 * T) + (unsigned long)4362)) - 18"

.SH "Function Documentation"
.PP 
.SS "static void beginUS (void)\fC [static]\fP"

.PP
 Function: \fBbeginUS(void)\fP
.PP
Include: ultrasonic\&.h
.PP
Description: starts a scan on the ultrasonic sensor
.PP
Arguments: None
.PP
Returns: None 
.SS "void calibrateRange (unsigned intreference)"

.PP
 Function: \fBcalibrateRange(unsigned int reference)\fP
.PP
Include:
.PP
Description: Calibrates the range of both the IR and ultrasonic sensors based on a given range\&.
.PP
Arguments: reference - The distance in mm to calibrate the current measurements from
.PP
Returns: None
.PP
\fBTodo\fP
.RS 4
Make sure this works properly, and does not do bad things in different target states 
.RE
.PP

.SS "void configureAD (void)"

.PP
 Function: \fBconfigureAD(void)\fP
.PP
Include: \fBRange\&.h\fP
.PP
Description: Configures the ADC, In ADCON1, we set right-justified mode, and select AN0 as the input channel\&. In ADCON0, we set a sample rate of Fosc/8, select AN0, and enable the ADC\&. Arguments: None
.PP
Returns: None
.PP
\fBTodo\fP
.RS 4
Make absolutely sure this works on the minimal board, and with the temperature sensor, and pot and IR sensor 
.RE
.PP

.SS "void configureRange (void)"

.PP
 Function: \fBconfigureRange(void)\fP
.PP
Include: \fBRange\&.h\fP
.PP
Description: Configures the Range module
.PP
Arguments: None
.PP
Returns: None 
.SS "\fBTargetState\fP getTargetState (void)"

.PP
 Function: \fBgetTargetState(void)\fP
.PP
Include: \fBRange\&.h\fP
.PP
Description: Returns the target state from the last range reading\&. E\&.g\&. Good track, or direction not quite correct as US returned, but IR didn't and was within IR range etc\&.
.PP
Arguments: None
.PP
Returns: the target state 
.SS "unsigned int range (void)"

.PP
 Function: \fBrange(void)\fP
.PP
Include: \fBRange\&.h\fP
.PP
Description: Uses the IR and Ultrasonic sensors to find the range
.PP
Arguments: None
.PP
Returns: fused range as an unsigned int
.PP
\fBTodo\fP
.RS 4
Implement the sampling rate somehow 
.RE
.PP

.SS "unsigned int rangeIR (void)\fC [static]\fP"

.PP
 Function: \fBrangeIR(void)\fP
.PP
Include:
.PP
Description: Reads the range from the IR Sensor
.PP
Arguments: None
.PP
Returns: Range (in mm) as an unsigned int\&.
.PP
Remark: Returns 0 if there is no target found
.PP
\fBTodo\fP
.RS 4
Double check calibration and accuracy 
.PP
Make sure the calibration is the same every time, and does not change appreciably 
.RE
.PP

.SS "void rangeISR (void)"

.PP
 Function: \fBrangeISR(void)\fP
.PP
Include: ultrasonic\&.h
.PP
Description: Called when an range related interrupt is fired, acts as the service routine for the rangefinding module\&.
.PP
Arguments: None
.PP
Returns: None 
.SS "unsigned int rangeUltrasonic (void)"

.PP
 Function: \fBrangeUltrasonic(void)\fP
.PP
Include:
.PP
Description: performs an ultrasonic range reading\&. Pins:
.PP
Arguments: None
.PP
Returns: the average of the samples
.PP
todo remove this function? 
.SS "static unsigned int rangeUS (unsigned chartemp)\fC [static]\fP"

.PP
 Function: \fBrangeUS(unsigned char temp)\fP
.PP
Include: ultrasonic\&.h
.PP
Description: Returns the result of the ultrasonic read (zero if no target found)\&. Will poll until measurement is complete\&.
.PP
Arguments: tempx2 - 2x the temperature in deg Celsius
.PP
Returns: Distance in mm (unsigned int)
.PP
\fBTodo\fP
.RS 4
Include temperature read (or get temperature) in Ultrasonic reading 
.PP
Double check the calibration and accuracy 
.RE
.PP

.SS "unsigned int rawRange (void)"

.PP
 Function: \fBrawRange(void)\fP
.PP
Include: \fBRange\&.h\fP
.PP
Description: Returns uncalibrated range without the calibration offset
.PP
Arguments: None
.PP
Returns: distance (in mm) as an unsigned int 
.SS "\fBTargetState\fP readTargetState (void)"

.PP
 Function: \fBreadTargetState(void)\fP
.PP
Include: \fBRange\&.h\fP
.PP
Description: Does the same thing as getTargetState, but actually performs a \fBrange()\fP read
.PP
Arguments: None
.PP
Returns: the target state 
.SS "static unsigned int sampleIR (charnumSamples)\fC [static]\fP"

.PP
 Function: sampleIR(void)
.PP
Include:
.PP
Description: takes numSamples samples of the IR sensor and returns the average
.PP
Arguments: None
.PP
Returns: the average of the samples
.PP
\fBTodo\fP
.RS 4
implement the sample rate somehow 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "signed int calibration_offset = 0\fC [static]\fP"

.SS "signed int calibration_offset_IR = 0\fC [static]\fP"

.SS "signed int calibration_offset_US = 0\fC [static]\fP"

.SS "\fBTargetState\fP current_target_state\fC [static]\fP"

.SS "unsigned int lastRange = 0\fC [static]\fP"

.SS "volatile char measuringUS = 0\fC [static]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for Yavin IV Death Star Tracker from the source code\&.
